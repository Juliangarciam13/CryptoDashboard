{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/CryptoDashboard/src/Components/Graph.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CryptoChart = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchCryptoData = async () => {\n      try {\n        const response = await fetch(\"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30\");\n        const data = await response.json();\n        const formattedData = {\n          labels: data.prices.slice(-30).map(entry => new Date(entry[0]).toLocaleDateString()),\n          datasets: [{\n            label: \"Precio de Bitcoin (USD)\",\n            data: data.prices.slice(-30).map(entry => entry[1]),\n            backgroundColor: \"rgba(192, 192, 192, 0.8)\",\n            borderColor: \"rgba(192, 192, 192, 1)\",\n            borderWidth: 2\n          }]\n        };\n        setChartData(formattedData);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchCryptoData();\n  }, []);\n  useEffect(() => {\n    if (chartData) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      if (chartRef.current.chart) {\n        chartRef.current.chart.destroy();\n      }\n      chartRef.current.chart = new Chart(ctx, {\n        type: \"bar\",\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                beginAtZero: true,\n                font: {\n                  size: 12\n                }\n              },\n              categoryPercentage: 1,\n              // Ajustar el porcentaje de la barra a 1 para que ocupe todo el espacio disponible\n              barPercentage: 0.8 // Ajustar el porcentaje de la barra según sea necesario\n            },\n\n            y: {\n              grid: {\n                display: true\n              },\n              ticks: {\n                beginAtZero: true,\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    }\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    },\n    children: chartData ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando datos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(CryptoChart, \"pZiLd+mBGrUgtjABGYJARwxehfg=\");\n_c = CryptoChart;\nexport default CryptoChart;\nvar _c;\n$RefreshReg$(_c, \"CryptoChart\");","map":{"version":3,"names":["useState","useEffect","useRef","Chart","jsxDEV","_jsxDEV","CryptoChart","_s","chartData","setChartData","chartRef","fetchCryptoData","response","fetch","data","json","formattedData","labels","prices","slice","map","entry","Date","toLocaleDateString","datasets","label","backgroundColor","borderColor","borderWidth","error","console","ctx","current","getContext","chart","destroy","type","options","responsive","maintainAspectRatio","scales","x","grid","display","ticks","beginAtZero","font","size","categoryPercentage","barPercentage","y","plugins","legend","style","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/CryptoDashboard/src/Components/Graph.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\n\nconst CryptoChart = () => {\n    const [chartData, setChartData] = useState(null);\n    const chartRef = useRef(null);\n\n    useEffect(() => {\n        const fetchCryptoData = async () => {\n            try {\n                const response = await fetch(\n                    \"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30\"\n                );\n                const data = await response.json();\n\n                const formattedData = {\n                    labels: data.prices.slice(-30).map((entry) => new Date(entry[0]).toLocaleDateString()),\n                    datasets: [\n                        {\n                            label: \"Precio de Bitcoin (USD)\",\n                            data: data.prices.slice(-30).map((entry) => entry[1]),\n                            backgroundColor: \"rgba(192, 192, 192, 0.8)\",\n                            borderColor: \"rgba(192, 192, 192, 1)\",\n                            borderWidth: 2,\n                        },\n                    ],\n                };\n\n                setChartData(formattedData);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        fetchCryptoData();\n    }, []);\n\n    useEffect(() => {\n        if (chartData) {\n            const ctx = chartRef.current.getContext(\"2d\");\n\n            if (chartRef.current.chart) {\n                chartRef.current.chart.destroy();\n            }\n\n            chartRef.current.chart = new Chart(ctx, {\n                type: \"bar\",\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            grid: {\n                                display: false,\n                            },\n                            ticks: {\n                                beginAtZero: true,\n                                font: {\n                                    size: 12,\n                                },\n                            },\n                            categoryPercentage: 1, // Ajustar el porcentaje de la barra a 1 para que ocupe todo el espacio disponible\n                            barPercentage: 0.8, // Ajustar el porcentaje de la barra según sea necesario\n                        },\n                        y: {\n                            grid: {\n                                display: true,\n                            },\n                            ticks: {\n                                beginAtZero: true,\n                                font: {\n                                    size: 12,\n                                },\n                            },\n                        },\n                    },\n                    plugins: {\n                        legend: {\n                            display: false,\n                        },\n                    },\n                },\n            });\n        }\n    }, [chartData]);\n\n    return (\n        <div style={{ width: \"100%\", height: \"400px\" }}>\n            {chartData ? (\n                <canvas ref={chartRef}></canvas>\n            ) : (\n                <p>Cargando datos...</p>\n            )}\n        </div>\n    );\n};\n\nexport default CryptoChart;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}