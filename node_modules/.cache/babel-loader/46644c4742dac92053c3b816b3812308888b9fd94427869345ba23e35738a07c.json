{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/CryptoDashboard/src/Components/CryptoChart.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CryptoChart = _ref => {\n  _s();\n  let {\n    selectedCrypto\n  } = _ref;\n  const [chartData, setChartData] = useState(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchCryptoData = async () => {\n      try {\n        if (selectedCrypto) {\n          const response = await fetch(`https://api.coingecko.com/api/v3/coins/${selectedCrypto.id}/market_chart?vs_currency=usd&days=30`);\n          const data = await response.json();\n          const dates = [];\n          const prices = [];\n          const startDate = new Date(data.prices[0][0]);\n          for (let i = 0; i < 30; i++) {\n            const date = new Date(startDate);\n            date.setDate(startDate.getDate() + i);\n            dates.push(date.toLocaleDateString());\n            prices.push(data.prices[i][1]);\n          }\n          const formattedData = {\n            labels: dates,\n            datasets: [{\n              label: \"Precio de Bitcoin (USD)\",\n              data: prices,\n              backgroundColor: \"rgba(192, 192, 192, 0.8)\",\n              borderWidth: 2,\n              hoverBackgroundColor: \"#C1EE0A\"\n            }]\n          };\n          setChartData(formattedData);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchCryptoData();\n  }, [selectedCrypto]);\n  useEffect(() => {\n    if (chartData) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      if (chartRef.current.chart) {\n        chartRef.current.chart.destroy();\n      }\n      chartRef.current.chart = new Chart(ctx, {\n        type: \"bar\",\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                beginAtZero: true,\n                font: {\n                  size: 12\n                }\n              },\n              categoryPercentage: 1,\n              barPercentage: 0.8\n            },\n            y: {\n              beginAtZero: false,\n              grid: {\n                display: true\n              },\n              ticks: {\n                stepSize: 500,\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    }\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    },\n    children: chartData ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(CryptoChart, \"pZiLd+mBGrUgtjABGYJARwxehfg=\");\n_c = CryptoChart;\nexport default CryptoChart;\nvar _c;\n$RefreshReg$(_c, \"CryptoChart\");","map":{"version":3,"names":["useState","useEffect","useRef","Chart","jsxDEV","_jsxDEV","CryptoChart","_ref","_s","selectedCrypto","chartData","setChartData","chartRef","fetchCryptoData","response","fetch","id","data","json","dates","prices","startDate","Date","i","date","setDate","getDate","push","toLocaleDateString","formattedData","labels","datasets","label","backgroundColor","borderWidth","hoverBackgroundColor","error","console","ctx","current","getContext","chart","destroy","type","options","responsive","maintainAspectRatio","scales","x","grid","display","ticks","beginAtZero","font","size","categoryPercentage","barPercentage","y","stepSize","plugins","legend","style","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/CryptoDashboard/src/Components/CryptoChart.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\n\n\nconst CryptoChart = ({selectedCrypto}) => {\n    const [chartData, setChartData] = useState(null);\n    const chartRef = useRef(null);\n\n    useEffect(() => {\n        const fetchCryptoData = async () => {\n            try {\n                if (selectedCrypto) {\n                    const response = await fetch(\n                        `https://api.coingecko.com/api/v3/coins/${selectedCrypto.id}/market_chart?vs_currency=usd&days=30`\n                    );\n                const data = await response.json();\n\n                const dates = [];\n                const prices = [];\n\n                const startDate = new Date(data.prices[0][0]);\n                for (let i = 0; i < 30; i++) {\n                    const date = new Date(startDate);\n                    date.setDate(startDate.getDate() + i);\n                    dates.push(date.toLocaleDateString());\n                    prices.push(data.prices[i][1]);\n                }\n\n                const formattedData = {\n                    labels: dates,\n                    datasets: [\n                        {\n                            label: \"Precio de Bitcoin (USD)\",\n                            data: prices,\n                            backgroundColor: \"rgba(192, 192, 192, 0.8)\",\n                            borderWidth: 2,\n                            hoverBackgroundColor: \"#C1EE0A\",\n                        },\n                    ],\n                };\n                setChartData(formattedData);\n            }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        fetchCryptoData();\n    }, [selectedCrypto]);\n\n    useEffect(() => {\n        if (chartData) {\n            const ctx = chartRef.current.getContext(\"2d\");\n\n            if (chartRef.current.chart) {\n                chartRef.current.chart.destroy();\n            }\n\n            chartRef.current.chart = new Chart(ctx, {\n                type: \"bar\",\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            grid: {\n                                display: false,\n                            },\n                            ticks: {\n                                beginAtZero: true,\n                                font: {\n                                    size: 12,\n                                },\n                            },\n                            categoryPercentage: 1,\n                            barPercentage: 0.8,\n                        },\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                display: true,\n                            },\n                            ticks: {\n                                stepSize: 500,\n                                font: {\n                                    size: 12,\n                                },\n                            },\n                        },\n                    },\n                    plugins: {\n                        legend: {\n                            display: false,\n                        },\n                    },\n                },\n            });\n        }\n    }, [chartData]);\n\n    return (\n        <div style={{ width: \"100%\", height: \"400px\" }}>\n            {chartData ? (\n                <canvas ref={chartRef}></canvas>\n            ) : (\n                <p>Loading...</p>\n            )}\n        </div>\n    );\n};\n\nexport default CryptoChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}